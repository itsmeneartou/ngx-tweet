{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/components/ngx-tweet.component.ts","webpack:///./src/app/ngx-tweet.module.ts","webpack:///./src/app/services/ngx-tweet.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Input,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgxTweetService } from '../services/ngx-tweet.service';\n\n@Component({\n    selector: 'ngx-tweet',\n    template: '<ng-content *ngIf=\"isTwitterScriptLoading\"></ng-content>',\n    styles: [ '.twitter-tweet { transform: none !important; }' ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxTweetComponent implements OnInit {\n    @Input() public tweetId: string;\n\n    public isTwitterScriptLoading: boolean = true;\n\n    constructor(private readonly _elementRef: ElementRef,\n                private readonly _ngxTweetService: NgxTweetService,\n                private readonly _changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    public ngOnInit(): void {\n        this._loadTwitterScript();\n    }\n\n    private _loadTwitterScript(): void {\n        this._ngxTweetService\n            .loadScript()\n            .subscribe((twitterData: any) => {\n                this._updateTwitterScriptLoadingState();\n                twitterData.widgets.createTweet(this.tweetId, this._elementRef.nativeElement, {});\n            });\n    }\n\n    private _updateTwitterScriptLoadingState(): void {\n        this.isTwitterScriptLoading = false;\n        this._changeDetectorRef.detectChanges();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxTweetComponent } from './components/ngx-tweet.component';\nimport { NgxTweetService } from './services/ngx-tweet.service';\n\n@NgModule({\n    declarations: [\n        NgxTweetComponent\n    ],\n    imports: [ CommonModule ],\n    exports: [ NgxTweetComponent ],\n    providers: [ NgxTweetService ]\n})\nexport class NgxTweetModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\n@Injectable()\nexport class NgxTweetService {\n\n    private readonly TWITTER_OBJECT = 'twttr';\n    private readonly TWITTER_SCRIPT_ID = 'twitter-wjs';\n    private readonly TWITTER_WIDGET_URL = 'https://platform.twitter.com/widgets.js';\n\n    constructor(@Inject(DOCUMENT) private readonly _document: any) {\n    }\n\n    public loadScript(): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            this._startScriptLoad();\n            this._document.defaultView[ this.TWITTER_OBJECT ].ready(this._onTwitterScriptLoadedFactory(observer));\n        });\n    }\n\n    private _startScriptLoad(): void {\n        const twitterData = this._document.defaultView[ this.TWITTER_OBJECT ] || {};\n\n        if (this._twitterScriptAlreadyExists()) {\n            this._document.defaultView[ this.TWITTER_OBJECT ] = twitterData;\n            return;\n        }\n\n        this._appendTwitterScriptToDOM();\n\n        twitterData._e = [];\n\n        twitterData.ready = (callback: Function) => {\n            twitterData._e.push(callback);\n        };\n\n        this._document.defaultView[ this.TWITTER_OBJECT ] = twitterData;\n    }\n\n    private _twitterScriptAlreadyExists(): boolean {\n        const twitterScript = this._document.getElementById(this.TWITTER_SCRIPT_ID);\n        return (twitterScript !== null || typeof twitterScript !== 'object');\n    }\n\n    private _appendTwitterScriptToDOM(): void {\n        const firstJSScript = this._document.getElementsByTagName('script')[ 0 ];\n        const js = this._document.createElement('script');\n        js.id = this.TWITTER_SCRIPT_ID;\n        js.src = this.TWITTER_WIDGET_URL;\n        firstJSScript.parentNode.insertBefore(js, firstJSScript);\n    }\n\n    private _onTwitterScriptLoadedFactory(observer: Observer<any>): Function {\n        return (twitterData: any) => {\n            observer.next(twitterData);\n            observer.complete();\n        };\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { NgxTweetModule } from './app/ngx-tweet.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(NgxTweetModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}